# -*- coding: utf-8 -*-
"""YOLO.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1rzcdboeFk-dttLTh7r8Si3BPn9IDaJtx

# LIAISON AU GOOGLE DRIVE #
"""

#Liaison du drive google au google colab

from google.colab import drive
drive.mount ("/content/gdrive")


#Redirection vers le drive

%cd /content/gdrive/MyDrive/

#Permet de savoir dans quel répertoire nous nous trouvons

!pwd

"""# CREATION DE REPERTOIRES ET CLONAGE DU CODE YOLOV7 #"""

# Commented out IPython magic to ensure Python compatibility.
# import dependencies
from IPython.display import display, Javascript, Image
from google.colab.output import eval_js
from google.colab.patches import cv2_imshow
from base64 import b64decode, b64encode
import cv2
import numpy as np
import PIL
import io
import html
import time
import matplotlib.pyplot as plt
#%matplotlib inline

#Création du répertoire dans le drive

import os

if not os.path.isdir("VisionYolo"):
  os.makedirs("VisionYolo")

# Commented out IPython magic to ensure Python compatibility.
#Direction vers le fichier créé

%cd VisionYolo

#Clonage des fichiers YOLOV7

!git clone https://github.com/WongKinYiu/yolov7.git

"""# TELECHARGEMENT DES MODELES PRE-FAITS #"""


#Direction vers Yolov7

%cd yolov7

#Ajoute le programme Yolov7

!wget https://github.com/WongKinYiu/yolov7/releases/download/v0.1/yolov7.pt

"""# ENTRAINER YOLOV7 POUR DETECTER DES MAINS #"""

# Commented out IPython magic to ensure Python compatibility.
#Aller vers le dossier yolov7

%cd /content/gdrive/MyDrive/VisionYolo/yolov7

!pwd

#Entrainement avec les images

!python train.py --device 0 --batch-size 16 --epochs 100 --img 640 640 --data data/custom_data.yaml --hyp data/hyp.scratch.custom.yaml --cfg cfg/training/yolov7-custom.yaml --weights yolov7.pt --name yolov7-custom

#Faire tourner le best.pt créer par l'entrainement sur vidéo ou photo

!python detect.py --weights runs/train/yolov7-custom7/weights/best.pt --conf 0.5 --img-size 640 --source Test10.mp4

"""# FAIRE FONCTIONNER LE PROGRAMME SUR DES IMAGES & VIDEOS #"""

#Permet des savoir dans quel répertoire nous nous trouvons

!pwd

#Permet de lancer le programme pour une image

!python detect.py --weights yolov7.pt --conf 0.5 --img-size 640 --source 1.jpg

#Permet de lancer le programme pour une vidéo

!python detect.py --weights yolov7.pt --conf 0.5 --img-size 640 --source Test2.mp4

"""# LANCER YOLO SUR UN LIVE FEED #"""

!pip3 install opencv-python==4.1.2.30

# Commented out IPython magic to ensure Python compatibility.
# %cd /content/gdrive/MyDrive/VisionYolo/yolov7/

from google.colab.patches import cv2_imshow

#Permet de lancer le programme pour une vidéo

!python detect.py --weights yolov7.pt --conf 0.5 --img-size 640 --source 0

from IPython.display import display, Javascript
from google.colab.output import eval_js
from base64 import b64decode

def take_photo(filename='photo.jpg', quality=0.8):
  js = Javascript(''
    async function takePhoto(quality) {
      const div = document.createElement('div');
      const capture = document.createElement('button');
      capture.textContent = 'Capture';
      div.appendChild(capture);

      const video = document.createElement('video');
      video.style.display = 'block';
      const stream = await navigator.mediaDevices.getUserMedia({video: true});

      document.body.appendChild(div);
      div.appendChild(video);
      video.srcObject = stream;
      await video.play();

      // Resize the output to fit the video element.
      google.colab.output.setIframeHeight(document.documentElement.scrollHeight, true);

      // Wait for Capture to be clicked.
      await new Promise((resolve) => capture.onclick = resolve);

      const canvas = document.createElement('canvas');
      canvas.width = video.videoWidth;
      canvas.height = video.videoHeight;
      canvas.getContext('2d').drawImage(video, 0, 0);
      stream.getVideoTracks()[0].stop();
      div.remove();
      return canvas.toDataURL('image/jpeg', quality);
    }
    ''')
  display(js)
  data = eval_js('takePhoto({})'.format(quality))
  binary = b64decode(data.split(',')[1])
  with open(filename, 'wb') as f:
    f.write(binary)
  return filename

from IPython.display import Image
try:
  filename = take_photo()
  print('Saved to {}'.format(filename))
  
  # Show the image which was just taken.
  display(Image(filename))
except Exception as err:
  # Errors will be thrown if the user does not have a webcam or if they do not
  # grant the page permission to access it.
  print(str(err))